#!/usr/bin/env bash
# Copyright The Conforma Contributors
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# SPDX-License-Identifier: Apache-2.0

set -o errexit
set -o nounset
set -o pipefail

CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD)
if [[ $CURRENT_BRANCH != "main" ]]; then
  read -r -p "Not in main branch. Continue anyway? [y/N] " ans
  [[ "$ans" != "y" ]] && exit 1
fi

RELEASE_NAME="v$(cat VERSION)"
if [[ $RELEASE_NAME != *.* || $RELEASE_NAME == *.*.* ]]; then
  echo "Release name should include one dot, e.g. v0.5 or v1.1-candidate"
  exit 1
fi

# Use release name as-is for the branch name
BRANCH_NAME="release-${RELEASE_NAME}"

# Konflux disallows . chars in names so remove those
KONFLUX_APPLICATION_SUFFIX="${RELEASE_NAME/./}"

KONFLUX_APPLICATION_NAME=ec-${KONFLUX_APPLICATION_SUFFIX}
KONFLUX_CLI_COMPONENT_NAME=cli-${KONFLUX_APPLICATION_SUFFIX}

# Show some useful values
echo Release name: $RELEASE_NAME
echo Release branch name: $BRANCH_NAME
echo Konflux application name: $KONFLUX_APPLICATION_NAME
echo Konflux cli component name: $KONFLUX_CLI_COMPONENT_NAME

nice_title() {
  echo -e "\033[1mÂ» $*\033[0m"
}

# Explain what needs to be done next
# This is like slightly interactive documentation.
# (We could make this more automated in future.)
cat <<EOT1
Next steps:

$(nice_title Create new release branch)

git fetch upstream
git push upstream refs/remotes/upstream/main:refs/heads/${BRANCH_NAME}
git checkout -b ${BRANCH_NAME} upstream/${BRANCH_NAME}

$(nice_title Create a PR in for konflux-release-data)

This repo: https://gitlab.cee.redhat.com/releng/konflux-release-data/
This directory: tenants-config/cluster/stone-prd-rh01/tenants/rhtap-contract-tenant/

Copy overlays/ec-v06 to overlays/${KONFLUX_APPLICATION_NAME}

Edit overlays/${KONFLUX_APPLICATION_NAME}/kustomization.yaml as required.
Useful vimdiff command:
  vimdiff overlays/ec-v06/kustomization.yaml overlays/${KONFLUX_APPLICATION_NAME}/kustomization.yaml

Update kustomization.yaml to add the extra row.

Run 'tenants-config/build-single.sh rhtap-contract' in that repo and create a PR.

$(nice_title Update pipelines)

We used to merge the PR generated by Konflux, but actually I think it's better if we
ignore it and instead copy in the main branch pipeline with small edits for the app
name, component name and branch name. It could probably be a yq one-liner.

(To do: Create a little script for this.)

Side note: We might want to "freshen" the pipeline to keep it roughly in sync with
the Konflux defaults, but let's do that in main branch at some other time rather
than have it coupled to this procedure.

Useful vimdiff commands:
 vimdiff +'set ft=yaml' <(git show main:.tekton/cli-main-ci-pull-request.yaml) .tekton/cli-${KONFLUX_APPLICATION_SUFFIX}-pull-request.yaml
 vimdiff +'set ft=yaml' <(git show main:.tekton/cli-main-ci-push.yaml) .tekton/cli-${KONFLUX_APPLICATION_SUFFIX}-push.yaml

EOT1

cat <<EOT2
$(nice_title Create a PR in the konflux-release-data repo to update the ReleasePlanAdmission record)

This repo: https://gitlab.cee.redhat.com/releng/konflux-release-data/
This file: config/stone-prd-rh01.pg1f.p1/product/ReleasePlanAdmission/rhtap-contract/ec-cli.yaml

Add the new release under /spec/applications and /spec/data/mapping/components and create a PR.

(This could perhaps be done together with the tenants-config change.)

$(nice_title Confirming it\'s working)

Make sure builds are green in the new release branch, and sure they're passing Conforma policy:
https://console.redhat.com/application-pipeline/workspaces/rhtap-contract/applications/${KONFLUX_APPLICATION_NAME}/activity/pipelineruns

Check that a new release appeared in the releases tab:
https://console.redhat.com/preview/application-pipeline/workspaces/rhtap-contract/applications/${KONFLUX_APPLICATION_NAME}/releases
(Note that viewing the release pipeline itself requires permissions in the rhtap-releng workspace.)

Check that images are released:
Look at https://catalog.redhat.com/software/containers/rhtas/ec-rhel9/65f1f9dcfc649a18c6075de5.
Use show-latest-build-versions.sh script in the hacks repo.
Use skopeo, e.g. 'skopeo inspect docker://registry.redhat.io/rhtas/ec-rhel9:${KONFLUX_APPLICATION_SUFFIX}'
Use podman, e.g. 'podman run --rm registry.redhat.io/rhtas/ec-rhel9:${KONFLUX_APPLICATION_SUFFIX} version'

$(nice_title Create stable versioned branch in ec-policies repo and corresponding config in the config repo)

For better or for worse, we create a branch in the ec-policies repo and a corresponding config file that RHTAP templates can use.
(This may change in future if something like https://github.com/redhat-appstudio/tssc-sample-pipelines/pull/42 is adopted.)

For example (in ec-policies repo):
  git push upstream upstream/main:refs/heads/release-${RELEASE_NAME}
You have some flexibility around what sha to use, but the current upstream/main is probably good choice.

The config PR should add one more of these for ${RELEASE_NAME}:
https://github.com/enterprise-contract/config/blob/ddfe77d02b8feb20e0701290dcf84e6d6d10abf0/src/data.json#L31-L40
Don't forget to do 'make refresh' and check in the changes.
When it's merged we should see it at https://github.com/enterprise-contract/config/blob/main/default-${RELEASE_NAME}/policy.yaml

Deciding when to update the tssc-sample-pipelines repo is up to the RHTAP developers and may depend on their release
schedule and the release schedule of RHTAS. Note that there are two places to change it:
https://github.com/redhat-appstudio/tssc-sample-pipelines/blob/37a514dee543f730831d1d078ce4a11f7778e79b/hack/patches/pipelines/gitops-pull-request/patch.yaml#L9
https://github.com/redhat-appstudio/tssc-sample-pipelines/blob/37a514dee543f730831d1d078ce4a11f7778e79b/pac/pipelines/gitops-pull-request-rhtap.yaml#L18
(It's probably a good idea to sync with RHTAP and RHTAS folks to understand their release schedules and let them know what version of EC they'll likely be using.)

$(nice_title File a story to get the release notes created)

(If not done already.)

For example: https://issues.redhat.com/browse/EC-869

$(nice_title Bump the ref in the RHTAS repo)

See https://github.com/securesign/cosign/blob/611cf29fcb9797ece334433a2cb2adc4899259c7/Dockerfile.clients.rh#L10
and possibly https://github.com/securesign/cosign/blob/611cf29fcb9797ece334433a2cb2adc4899259c7/Dockerfile.client-server-re.rh#L5
but IIUC the second one will be removed soon.

Update the ref and create a PR. IIUC main branch is all that's needed.
EOT2
